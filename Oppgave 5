import numpy as np
import matplotlib.pyplot as plt


# Konstanter
g = 9.81  # tyngdekraft
h = 2     # vanndybde
a = 0.5   # vanlig dybde
b = 0.2   # amplitude
k = 2 * np.pi / 10  

#Definerer funksjonen
def zeta(x, t):
    return a + b * np.cos(k * x - np.sqrt(g * h) * t)

# t-verdier
t_values = [0, 1, 2, 3]


x = np.linspace(0, 20, 400)

# Plotter bølgene med forskjellige t
plt.figure(figsize=(10, 8))
for t in t_values:
    plt.plot(x, zeta(x, t), label=f't={t}')

# Definerer bunnen av boksen
for t in t_values:
    plt.plot(x, -h * np.ones_like(x), 'k--')  

plt.title('Bølgetopper')
plt.xlabel('x')
plt.ylabel('Vann level (z)')
plt.ylim(0, 1)  #Justerer y for å få bedre illustarasjon
plt.grid(True)
plt.legend()
plt.show()


#oppg5 ver3

import numpy as np
import scipy.sparse as sp
import scipy.sparse.linalg as lin
import matplotlib.pyplot as plt

# bestem antall punkter i gitteret i x-retning
m = 20

# sett m+2 punkter mellom 0 og 1
# m+2 fordi vi teller ikke randene 0 og 1 - se randbetingelser for hvorfor
x = np.linspace(0, 1, m+2)

# avstand mellom punktene
h = x[1] - x[0]

# antall punkter i gitteret i y-retning
n = 20

# sett n+2 punkter mellom 0 og 1
y = np.linspace(0, 1, n+2)

# avstand mellom punktene
k = y[1] - y[0]

# initialiserer matrisen


L_for = np.zeros((m*n, m*n))

# løkka, går fra p=0 til p=(m*n)-1
# setter inn hvert ledd i ligningen for u_p
# sjekker med "if" at hvert ledd vi vil legge inn er innenfor området
for p in np.arange(m * n):
    if p < (m*n)-1:
        L_for[p,p+1] = 1/(h**2)
    if p > 0:
        L_for[p,p-1] = 1/(h**2)
    if p < (m*(n-1)):
        L_for[p,p+m] = 1/(k**2)
    if p >= m:
        L_for[p,p-m] = 1/(k**2)
    L_for[p,p] = -2/(h**2) - 2/(k**2)
    
print(L_for)

# sett m+2 punkter mellom 0 og 1
# m+2 fordi vi teller ikke randene 0 og 1 - se randbetingelser for hvorfor
x=np.linspace(0,1,m+2)

# avstand mellom punktene
h=x[1]-x[0]

# setter opp matrise tilsvarende Poissonligning i x-retning
L1 = (1/h**2)*sp.diags([1,-2,1],[-1,0,1],shape=(m,m))

# identitetsmatrise i x-koordinatene
I1 = sp.eye(m)

# sett n+2 punkter mellom 0 og 1
y=np.linspace(0,1,n+2)

# avstand mellom punktene
k = y[1]-y[0]

# setter opp matrise tilsvarende Poissonligning i y-retning
L2 = (1/k**2)*sp.diags([1,-2,1],[-1,0,1],shape=(n,n))

# identitetsmatrise i y-koordinatene
I2 = sp.eye(n)

# sett sammen matrisa med Kroneckerproduktet
A = sp.kron(L1,I2) + sp.kron(I1,L2)

# Hvis vi ønsker kan vi skrive ut matrisa med:
#print(A.toarray())

x=np.linspace(0,1,m+2)
h=x[1]-x[0]

# samme ide som for Dirichlet, men nå med variabler tilsvarende randene
L3 = (1/h**2)*sp.diags([1,-2,1],[-1,0,1],shape=(m+2,m+2))

# vi må imidlertidig sette den første og siste rad lik null
# de vil bli erstatte av ligninger for den deriverte

# L3 blir ikke lenger diagonal, så datatypen må endres
L3 = sp.csr_matrix(L3)

# setter den første rad lik null
L3[0,0] = 0
L3[0,1] = 0
# setter den andre rad lik null
L3[-1,-1] = 0
L3[-1,-2] = 0

# identitetsmatrise, men også med første og siste rad satt lik null

I3 = sp.eye(m+2)

I3s = sp.csr_matrix(I3)

I3s[0,0]=0
I3s[-1,-1]=0

y=np.linspace(0,1,n+2)
k = y[1]-y[0]

# Gjør det samme for y-retningen

L4 = (1/k**2)*sp.diags([1,-2,1],[-1,0,1],shape=(n+2,n+2))

L4 = sp.csr_matrix(L4)
L4[0,0] = 0
L4[0,1] = 0
L4[-1,-1] = 0
L4[-1,-2] = 0

I4 = sp.eye(n+2)
I4s = sp.csr_matrix(I4)
I4s[0,0] = 0
I4s[-1,-1] = 0

# Vi lager matrisen fra kroneckerproduktet

B1 = sp.kron(L3,I4s) 
B2 = sp.kron(I3s,L4)

# Legg til randbetingelser i matrisa

# Følger koden fra 1d

# x-retning
NB3 = np.zeros((m+2,m+2))
# den deriverte, første rad
NB3[0,0] = -1/h
NB3[0,1] = 1/h
# den deriverte, siste rad
NB3[-1,-2] = -1/h
NB3[-1,-1] = 1/h

# y-retning
NB4 = np.zeros((n+2,n+2))
# den deriverte, første rad
NB4[0,0] = -1/k
NB4[0,1] = 1/k
# den deriverte, andre rad
NB4[-1,-2] = -1/k
NB4[-1,-1] = 1/k


# Lager matrisen fra kroneckerproduktet

NB1 = sp.kron(NB3,I4) 
NB2 = sp.kron(I3,NB4)

# Legger sammen ligningene fra interiøren og randbetingelsene

B = B1 + B2 + NB1 + NB2

#print(B.toarray())

# Randbetingelse i forcing

# en vektor (1,0,0,0,0....)
Nm_l = np.zeros(m+2)
Nm_l[0] = 1

# en vektor (0,0,...,0,0,1)
Nm_r = np.zeros(m+2)
Nm_r[-1] = 1

# en vektor (1,0,0,0,0....)
Nn_l = np.zeros(n+2)
Nn_l[0] = 1

# en vektor (0,0,...,0,0,1)
Nn_r = np.zeros(n+2)
Nn_r[-1] = 1

# randbetingelser for u'(x,0)
def g1(x):
    return 0*x

# randbetingelser for u'(x,1)
def g2(x):
    return np.sqrt(10*h)*np.sin(2*np.pi*x-np.sqrt(10*h))

# randbetingelser for u'(0,y)
def g3(y):
    return 0*y

# randbetingelser for u'(1,y)
def g4(y):
    return 0*y

# bidrag fra u'(x,0) på vektoren G
G1 = sp.kron(g1(x),Nn_l) 
# bidrag fra u'(x,1) på vektoren G
G2 = sp.kron(g2(x),Nn_r) 
# bidrag fra u'(0,y) på vektoren G
G3 = sp.kron(Nm_l,g3(y)) 
# bidrag fra u'(1,y) på vektoren G
G4 = sp.kron(Nm_r,g4(y))

# setter sammen bidragene over
G = G1 + G2 + G3 + G4

G = G.toarray()

# Løs systemet

G = np.reshape(G,(m+2)*(n+2))

# Vi bruker en minstkvadraters løser, siden systemet har sannsynligvis uendelig mange løsninger

v, istop, itn, r1norm = lin.lsqr(B, G)[:4]

# v er løsningen
# istop og itn forteller om iterasjoner brukt i løsningen
# r1norm er størrelse på feil - burde være nær 0 hvis systemet har løsninger

V = np.reshape(v,(m+2,n+2))

# lager rutenett for plotting
X, Y = np.meshgrid(x,y, indexing='ij')

# lager figuren
fig,ax2 = plt.subplots(subplot_kw ={"projection":"3d"}, figsize=(8,6))

# plotter

ax2.plot_surface(X,Y, V) #vmin=Z.min() * 2, cmap=cm.Blues)

plt.show()

# Plot vektorfeltet
#plt.figure()
#plt.quiver(X, Y, V)
#plt.xlabel('X')
#plt.ylabel('Y')
#plt.title('Vektorfelt')
#plt.show()

V1 = np.diff(V, axis=0)
V2 = np.diff(V, axis=1)


#Lager Plottet
fig, ax =plt.subplots(figsize=(15,15))

#Piler
ax.quiver(X[0:-1,0:-1], Y[0:-1,0:-1], V1[:,0:-1], V2[0:-1,:])
plt.show()

# lager rutenett for plotting
X, Y = np.meshgrid(x, y, indexing='ij')

# lager figuren
fig, ax = plt.subplots(subplot_kw={"projection": "3d"}, figsize=(15, 15))

# plotter med colormap. Du kan erstatte 'viridis' med andre colormaps etter ønske
surf = ax.plot_surface(X, Y, V, cmap='viridis')

# Legger til en fargebar for å indikere høyden
fig.colorbar(surf, shrink=0.5, aspect=5)

plt.show()

# Lager strømplot
#plt.figure(figsize=(10, 6))
#plt.streamplot(X, Y, V1, V2)
#plt.show()
